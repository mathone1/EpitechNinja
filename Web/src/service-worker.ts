/// <reference lib="webworker" />

import { build, files, version } from '$service-worker';
import { db } from '../src/libs/db';

const worker = (self as unknown) as ServiceWorkerGlobalScope;
const FILES = `cache${version}`;

// `build` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const to_cache = build.concat(files);
const staticAssets = new Set(to_cache);

worker.addEventListener('install', (event) => {
	event.waitUntil(
		caches
			.open(FILES)
			.then((cache) => cache.addAll(to_cache))
			.then(() => {
				worker.skipWaiting();
			})
	);
	event.waitUntil(caches.open('movie_posters'));
	event.waitUntil(caches.open('actor_images'));
	event.waitUntil(caches.open('overall_progress'));
	event.waitUntil(caches.open('available_items'));
	event.waitUntil(caches.open('movie_backdrops'));
});

worker.addEventListener('activate', (event) => {
	event.waitUntil(
		caches.keys().then(async (keys) => {
			// delete old caches except posters cache
			for (const key of keys) {
				if (key !== FILES
					&& key !== 'movie_posters'
					&& key != 'actor_images'
					&& key != 'overall_progress'
					&& key != 'available_movies'
					&& key != 'movie_backdrops')
					await caches.delete(key);
			}

			worker.clients.claim();
		})
	);
});

/**
 * Fetch the asset from the network and store it in the cache.
 * Fall back to the cache if the user is offline.
 */
async function fetchAndCache(request: Request) {
	const cache = await caches.open(`offline${version}`);

	try {
		const response = await fetch(request);
		cache.put(request, response.clone());
		return response;
	} catch (err) {
		const response = await cache.match(request);
		if (response) return response;

		throw err;
	}
}

worker.addEventListener('fetch', (event) => {

	if (event.request.method !== 'GET') return;

	const url = new URL(event.request.url);

	// Fetch Movie Poster -> if on cache returns it else fetch and save it.
	if (event.request.method == 'GET' && (/^\/images\/movie\/[0-9]+\/poster\/[a-zA-Z]{2}$/i.test(url.pathname) || /^\/api\/images\/movie\/[0-9]+\/poster\/[a-zA-Z]{2}$/i.test(url.pathname))) {
		event.respondWith(caches.open('movie_posters').then(cache => {
			return cache.match(event.request.url).then(cachedResponse => {
				return cachedResponse || fetch(event.request.url).then(fetchedResponse => {
					cache.put(event.request.url, fetchedResponse.clone());
					return fetchedResponse;
				});
			});
		}));

		return;
	}

	// Fetch Movie Backdrop -> if on cache returns it else fetch and save it.
	if (event.request.method == 'GET' && (/^\/images\/movie\/[0-9]+\/backdrop\/[a-zA-Z]{2}$/i.test(url.pathname) || /^\/api\/images\/movie\/[0-9]+\/backdrop\/[a-zA-Z]{2}$/i.test(url.pathname))) {
		event.respondWith(caches.open('movie_backdrops').then(cache => {
			return cache.match(event.request.url).then(cachedResponse => {
				return cachedResponse || fetch(event.request.url).then(fetchedResponse => {
					cache.put(event.request.url, fetchedResponse.clone());
					return fetchedResponse;
				});
			});
		}));

		return;
	}

	// Fetch Actor image -> if on cache returns it else fetch and save it.
	if (event.request.method == 'GET' && (/^\/images\/actor\/[a-zA-Z0-9]+.jpg$/i.test(url.pathname) || /^\/api\/images\/actor\/[a-zA-Z0-9]+.jpg$/i.test(url.pathname))) {
		event.respondWith(caches.open('actor_images').then(cache => {
			return cache.match(event.request.url).then(cachedResponse => {
				return cachedResponse || fetch(event.request.url).then(fetchedResponse => {
					cache.put(event.request.url, fetchedResponse.clone());
					return fetchedResponse;
				});
			});
		}));

		return;
	}

	// Network first progress ->
	if (event.request.method == 'GET' && (/^\/progress\/$/i.test(url.pathname) || /^\/api\/progress\/$/i.test(url.pathname) )) {

		event.respondWith(caches.open('overall_progress').then((cache) => {
			return fetch(event.request.url).then((fetchedResponse) => {
				cache.put(event.request, fetchedResponse.clone());
				return fetchedResponse;
			}).catch(() => {
				return cache.match(event.request.url);
			});
		}));

		return;
	}

	// Network first items ->
	if (event.request.method == 'GET' && (/^\/movies\/$/i.test(url.pathname) || /^\/api\/movies\/$/i.test(url.pathname) )) {

		event.respondWith(caches.open('available_movies').then((cache) => {
			return fetch(event.request.url).then((fetchedResponse) => {
				cache.put(event.request, fetchedResponse.clone());
				return fetchedResponse;
			}).catch(() => {
				return cache.match(event.request.url);
			});
		}));

		return;
	}

	// to Delete -> cache.delete(event.request.url)

	// Others

	if (event.request.headers.has('range')) return;

	// don't try to handle e.g. data: URIs
	const isHttp = url.protocol.startsWith('http');
	const isDevServerRequest =
		url.hostname === self.location.hostname && url.port !== self.location.port;
	const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
	const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

	if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
		event.respondWith(
			(async () => {
				// always serve static files and bundler-generated assets from cache.
				// if your application has other URLs with data that will never change,
				// set this variable to true for them and they will only be fetched once.
				const cachedAsset = isStaticAsset && (await caches.match(event.request));

				return cachedAsset || fetchAndCache(event.request);
			})()
		);
	}
});

function syncProgress() {

	console.log('Syncing watch status..')

	db.progress.toArray()
		.then(progress => {
			for (let index in progress) {
				if (progress[index].synced == false) {
					console.log('\tSyncing show ' + progress[index].id + '..');

					fetch(`${import.meta.env.VITE_API_URL}/progress/movie/` + progress[index].id, {
						method: 'POST',
						headers: {'Content-Type': 'application/json'},
						body: JSON.stringify({progress: progress[index].progress})
					})
					.then(result => result.json())
					.then(data => {
						if (data.status == 1) {
							db.progress.put({
								id: progress[index].id,
								progress: progress[index].progress,
								synced: true
							}, { id: progress[index].id })

							// db.progress.where("id").equals(progress[index].id).delete();
						}
					})
				}
			}
		})
}

worker.addEventListener('sync', (event) => {
	if (event.tag === 'syncProgress') {
		event.waitUntil(syncProgress());
	}
});
